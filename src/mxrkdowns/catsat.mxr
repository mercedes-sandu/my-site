p| //CatSAT// is a program created by [[<https://www.mccormick.northwestern.edu/research-faculty/directory/profiles/horswill-ian.html>Dr. Ian Horswill]] designed to solve constraint satisfaction problems, particularly in the context of procedural content generation for games. It is a declarative language, which means that the user specifies the state space of the problem and the constraints that must be satisfied, and the program will generate one or more models/solutions. I have primarily encountered CatSAT by working on Imaginarium, which does use CatSAT to generate models.
p| After working with Imaginarium for a few months during my graduate research for my M.S. in Computer Science with Dr. Horswill, we had some discussions about what additional types of constraints one would want to impose when using a program such as Imaginarium. In particular, Dr. Horswill was interested in imposing relationship/graph constraints. This means that, when generating multiple entities and relationships between them, the user could specify constraints such as "these two people must have some sort of relationship," "there must be a love triangle," or "these two people cannot be connected by any relationship." Imposing constraints like this involves the transitive closure, which due to being a binary relation, cannot be expressed using first-order logic (like the rest of SAT solving).
p| I am currently working on creating a new graph constraint class to accomplish this. So far, I have programmed some basic classes for a graph and the union find data structure. This past quarter, I have worked on developing a graph constraint class, which would be used to handle situations in which the SAT solver is attempting to flip a variable (which, in this case, means either adding an edge to or removing an edge from the graph). The entire structure requires the maintenance of a spanning tree, and since rebuilding a spanning tree after an edge removal is very expensive, we factor in a cost/risk function to avoid this situation as much as possible. In the coming months, I hope to rigorously test these classes with a variety of different scenarios. Furthermore, I intend to apply this new graph constraint class to a video game that I will design and develop as a part of my project.

g| https://github.com/ianhorswill/CatSAT